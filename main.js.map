{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto_project_ff/./src/components/card.js","webpack://mesto_project_ff/./src/components/modal.js","webpack://mesto_project_ff/./src/components/api.js","webpack://mesto_project_ff/./src/components/validation.js","webpack://mesto_project_ff/./src/scripts/index.js"],"sourcesContent":["export {createCard, deleteCard, toggleLikeCard, checkLikeOwner};\r\n\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n\r\n/**\r\n * Подготовка карточки для её отрисовывания\r\n * @param card Данные карточки\r\n * @param deleteCard Метод удаления карточки\r\n * @param likeCard Метод постановки лайка карточки\r\n * @param openModalImage Метод открытия карточки на весь экран\r\n * @param popupTypeImage Модалка карточки на весь экран\r\n * @param userId Идентификатор пользователя\r\n * @returns {Node}\r\n */\r\nfunction createCard(\r\n    card,\r\n    deleteCard,\r\n    likeCard,\r\n    openModalImage,\r\n    popupTypeImage,\r\n    userId\r\n) {\r\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n  const cardImage = cardElement.querySelector(\".card__image\");\r\n  const cardLikeCount = card.likes.length;\r\n  const cardElementLikeCount = cardElement.querySelector(\".card__like-count\");\r\n  const buttonDelete = cardElement.querySelector(\".card__delete-button\");\r\n  const cardLikeButton = cardElement.querySelector(\".card__like-button\");\r\n  const buttonLikeIcon = cardLikeButton.querySelector(\".card__like-svg\");\r\n\r\n  cardElement.id = card._id;\r\n  cardImage.src = card.link;\r\n  cardImage.alt = card.name;\r\n  cardElement.querySelector(\".card__title\").textContent = card.name;\r\n  cardElementLikeCount.textContent = cardLikeCount;\r\n\r\n  //Раскрыть изображение на весь экран\r\n  cardImage.addEventListener(\"click\", function (evt) {\r\n    openModalImage(popupTypeImage, evt);\r\n  });\r\n\r\n  if (card.owner._id === userId) {\r\n    //слушатель для удаления карточки\r\n    buttonDelete.classList.add('card__delete-button_active')\r\n    buttonDelete\r\n    .addEventListener(\"click\", function (evt) {\r\n      const newCard = evt.target.closest('.card');\r\n      deleteCard(newCard);\r\n    });\r\n  }\r\n\r\n  if (checkLikeOwner(card.likes, userId)) {\r\n    toggleLikeCard(buttonLikeIcon);\r\n  }\r\n\r\n  cardLikeButton\r\n  .addEventListener(\"click\", function () {\r\n    likeCard(card, buttonLikeIcon, cardElementLikeCount);\r\n  });\r\n\r\n  return cardElement;\r\n}\r\n\r\n/**\r\n * Удаление карточки с фронта\r\n * @param card Заполненный шаблон карточки на фронте\r\n */\r\nfunction deleteCard(card) {\r\n  card.remove();\r\n}\r\n\r\n/**\r\n * Поставка лайка (закрашивание)\r\n * @param evt Событие\r\n */\r\nfunction toggleLikeCard(buttonLike) {\r\n  //функция лайка\r\n  buttonLike.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\nfunction checkLikeOwner(likes, userId) {\r\n  let res = false;\r\n  likes.forEach((like) => {\r\n    if (like._id === userId) {\r\n      res = true;\r\n    }\r\n  });\r\n  return res;\r\n}\r\n","export {openModal, closeModal, closeForOverlayTypeEdit};\r\n\r\nfunction openModal(element) {\r\n  //ф-я открытия модального окна\r\n  element.classList.add(\"popup_is-opened\");\r\n  document.body.style.overflow = \"hidden\";\r\n  document.addEventListener(\"keydown\", keyDownLisnerEscForCloseModal); //слушатель ловит любые нажатия\r\n}\r\n\r\nfunction closeModal(element) {\r\n  //ф-я удаления модального окна\r\n  element.classList.remove(\"popup_is-opened\");\r\n  document.body.style.overflow = \"\"; //спрячем\r\n  document.removeEventListener(\"keydown\", keyDownLisnerEscForCloseModal); //удаляем слушателя на нажатие кнопки\r\n}\r\n\r\nfunction keyDownLisnerEscForCloseModal(evt) {\r\n  //клавишей esc с удалением слушателя\r\n  if (evt.key === \"Escape\") {\r\n    const element = document.querySelector(\".popup_is-opened\"); //получаем модальное окно\r\n    closeModal(element); //закрываем модальное окно\r\n  }\r\n}\r\n\r\nfunction closeForOverlayTypeEdit(evt) {\r\n  if (evt.target.classList.contains(\"popup_is-opened\")) {\r\n    //клик по оверлею\r\n    closeModal(document.querySelector(\".popup_is-opened\"));\r\n  }\r\n}\r\n","const token = 'e788d5e8-6d06-4d1d-982f-c0022b4b878a';\r\nconst baseUrl = 'https://mesto.nomoreparties.co/wff-cohort-18/';\r\nexport const getUserInfo = () => {\r\n  return fetch(baseUrl + 'users/me', {\r\n    headers: {\r\n      authorization: token\r\n    }\r\n  })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n};\r\nexport const getCards = () => {\r\n  return fetch(baseUrl + 'cards', {\r\n    headers: {\r\n      authorization: token\r\n    }\r\n  })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n}\r\n\r\nexport const updateUserInform = (userInfo) => {\r\n  return fetch(baseUrl + 'users/me', {\r\n    method: 'PATCH',\r\n    body: JSON.stringify({\r\n      name: userInfo.name,\r\n      about: userInfo.about,\r\n    }),\r\n    headers: {\r\n      authorization: token,\r\n      'Content-Type': 'application/json; charset=UTF-8'\r\n    }\r\n  })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n}\r\nexport const addNewCard = (cardsInfo) => {\r\n  return fetch(baseUrl + 'cards', {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      name: cardsInfo.name,\r\n      link: cardsInfo.link,\r\n    }),\r\n    headers: {\r\n      authorization: token,\r\n      'Content-Type': 'application/json; charset=UTF-8'\r\n    }\r\n  })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n}\r\n\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(baseUrl + 'cards/' + cardId, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: token\r\n    }\r\n  })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n}\r\n\r\nexport const addLikeCard = (cardId) => {\r\n  return fetch(\r\n      baseUrl + 'cards/like/' + cardId, {\r\n        method: 'PUT',\r\n        headers: {\r\n          authorization: token\r\n        }\r\n      })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n}\r\n\r\nexport const deleteLikeCard = (cardId) => {\r\n  return fetch(\r\n      baseUrl + 'cards/like/' + cardId, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          authorization: token\r\n        }\r\n      })\r\n  .then((res) => {\r\n        return handleResponse(res);\r\n      }\r\n  )\r\n}\r\n\r\nexport const updateAvatar = (avatar) => {\r\n  return fetch(baseUrl + 'users/me/avatar',\r\n      {\r\n        method: 'PATCH',\r\n        body: JSON.stringify({\r\n          avatar: avatar\r\n        }),\r\n        headers: {\r\n          authorization: token,\r\n          'Content-Type': 'application/json; charset=UTF-8'\r\n        }\r\n      })\r\n  .then((res) => {\r\n        handleResponse(res);\r\n      }\r\n  )\r\n}\r\n\r\nfunction handleResponse(response) {\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n  return Promise.reject(\r\n      'Ошибка:' + response.status + 'во время запроса информации о профиле.');\r\n}\r\n","export {enableValidation, clearValidation};\r\n\r\n//ф-я, которая добавляет класс с ошибкой\r\nconst showInputError = (validationConfig, formElement, formInput) => {\r\n  const errorElement = formElement.querySelector(`.${formInput.id}-error`);\r\n  formInput.classList.add(validationConfig.inputErrorClass); //добавляет инпуту класс с красной обводкой\r\n  errorElement.textContent = formInput.validationMessage;\r\n  // Показываем сообщение об ошибке\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\n//ф-я, которая удаляет класс с ошибкой\r\nconst hideInputError = (formElement, formInput, validationConfig) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${formInput.id}-error`);\r\n  formInput.classList.remove(validationConfig.inputErrorClass); //удаляет инпуту класс с красной обводкой\r\n  errorElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n//ф-я, которая проверяет валидность поля\r\nconst checkInputValidity = (formElement, formInput, validationConfig) => {\r\n  if (formInput.validity.valueMissing) {\r\n    formInput.setCustomValidity(formInput.dataset.errorEmpty);\r\n  }//если пустое\r\n  else if (formInput.validity.patternMismatch) {\r\n    formInput.setCustomValidity(formInput.dataset.errorPattern);\r\n  }//соответствует патерну\r\n  else if (formInput.validity.typeMismatch) {\r\n    formInput.setCustomValidity(formInput.dataset.errorType);\r\n  }//соответствует значению type\r\n  else {\r\n    formInput.setCustomValidity(\"\");\r\n  }\r\n  if (!formInput.validity.valid) {\r\n    showInputError(validationConfig, formElement, formInput);\r\n  } else {\r\n    hideInputError(formElement, formInput, validationConfig);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (validationConfig, popupForm) => {\r\n  const inputList = Array.from(\r\n      popupForm.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = popupForm.querySelector(\r\n      validationConfig.submitButtonSelector\r\n  );\r\n  inputList.forEach((formInput) => {\r\n    formInput.addEventListener(\"input\", () => {\r\n      checkInputValidity(popupForm, formInput, validationConfig);\r\n      toggleButtonState(validationConfig, inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\nconst enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n      document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n  formList.forEach((popupForm) => {\r\n    popupForm.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n    setEventListeners(validationConfig, popupForm);\r\n  });\r\n};\r\n\r\nconst clearValidation = (validationConfig, form) => {\r\n  const errorlist = Array.from(\r\n      form.querySelectorAll(validationConfig.errorSelector)\r\n  );\r\n  Array.from(\r\n      form.querySelectorAll(validationConfig.inputSelector))\r\n  .forEach((input) => {\r\n    hideInputError(form, input, validationConfig);\r\n  });\r\n  const buttonElement = form.querySelector(\r\n      validationConfig.submitButtonSelector\r\n  );\r\n  form.reset();\r\n  errorlist.forEach((error) => {\r\n    error.classList.remove(validationConfig.errorClass);\r\n    error.textContent = \"\";\r\n  });\r\n};\r\n\r\n//Ф-Я \"блокировки\" ищет невалидные поля\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((formInput) => {\r\n    return !formInput.validity.valid;\r\n  });\r\n};\r\n\r\n//ф-я состояния кнопки переключения\r\nconst toggleButtonState = (validationConfig, inputList, buttonElement) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n","import \"../pages/index.css\"; //импорт стилей сss\r\nimport {\r\n  checkLikeOwner,\r\n  createCard,\r\n  deleteCard,\r\n  toggleLikeCard\r\n} from \"../components/card.js\"; //импорт функций карточек\r\nimport {\r\n  closeForOverlayTypeEdit,\r\n  closeModal,\r\n  openModal,\r\n} from \"../components/modal.js\"; //импорт открытия и закрытия модалок\r\nimport * as api from \"../components/api.js\";\r\nimport {clearValidation, enableValidation} from \"../components/validation.js\";\r\n\r\nconst validConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n  errorSelector: \".form__input-error\",\r\n};\r\n\r\nconst SAVING = 'Сохранение...';\r\nconst SAVE = 'Сохранить';\r\n\r\nconst content = document.querySelector(\".content\");\r\nconst cardContainer = content.querySelector(\".places__list\");\r\n\r\nconst profileEditButton = content.querySelector(\".profile__edit-button\"); //переменные для редактирования профиля\r\nconst popupProfileEdit = document.querySelector(\".popup_type_edit\");\r\nconst closeButtonPopupProfileEdit =\r\n    popupProfileEdit.querySelector(\".popup__close\");\r\nconst profileEditForm = document.forms.edit_profile;\r\nconst buttonSubmitPopupProfileEdit = popupProfileEdit.querySelector(\r\n    \".popup__button\");\r\n\r\nconst profileAddButton = content.querySelector(\".profile__add-button\"); //переменные для добавления новой карточки\r\nconst popupTypeNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst closeButtonPopupTypeNewCard =\r\n    popupTypeNewCard.querySelector(\".popup__close\");\r\nconst newPlaceForm = document.forms.new_place;\r\nconst buttonSubmitPopupTypeNewCard = popupTypeNewCard.querySelector(\r\n    \".popup__button\");\r\n\r\nconst popupTypeImage = document.querySelector(\".popup_type_image\");\r\nconst buttonCloseImageModal = popupTypeImage.querySelector(\".popup__close\"); //переменная кнопка закрытия модального изображения\r\n\r\nconst popupDeleteCard = document.querySelector(\".popup_type_delete_card\");\r\nconst buttonClosePopupDeleteCard = popupDeleteCard.querySelector(\r\n    \".popup__close\");\r\nconst buttonConfirmationDeleteCard = popupDeleteCard.querySelector(\r\n    \".popup__confirmation\");\r\nconst profile = document.querySelector(\".profile\");\r\n\r\nconst userAvatar = profile.querySelector(\".profile__image\");\r\nconst profileAvatar = profile.querySelector(\".profile__avatar\");\r\nconst modalEditUserAvatar = document.querySelector(\".popup_type_edit-avatar\");\r\nconst buttonCloseModalEditUserAvatar = modalEditUserAvatar.querySelector(\r\n    \".popup__close\");\r\nconst buttonSubmitEditUserAvatar = modalEditUserAvatar.querySelector(\r\n    \".popup__button\")\r\nconst editAvatarForm = document.forms.edit_avatar;\r\n\r\nlet userId = '';\r\n\r\n//обновление профиля для формы редактировать\r\nfunction updateProfileFromFormEdit(evt) {\r\n  evt.preventDefault(); //отменяет стандартную отправку формы\r\n  buttonSubmitPopupProfileEdit.textContent = SAVING;\r\n  const formElement = document.forms.edit_profile;\r\n  const nameInput = formElement.elements.name.value;\r\n  const jobInput = formElement.elements.description.value;\r\n  api.updateUserInform({name: nameInput, about: jobInput})\r\n  .then((result) => {\r\n    fillUserData(result);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  })\r\n  .finally(() => {\r\n    closeModal(popupProfileEdit);\r\n    buttonSubmitPopupProfileEdit.textContent = SAVE;\r\n  });\r\n}\r\n\r\nfillData();\r\n\r\nfunction fillData() {\r\n  Promise.all([api.getUserInfo(), api.getCards()])\r\n  .then(([userInfoResponse, cardsResponse]) => {\r\n    fillUserData(userInfoResponse);\r\n    fillCardsData(cardsResponse);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n}\r\n\r\nfunction fillUserData(userInfoResponse) {\r\n  userAvatar.src = userInfoResponse.avatar;\r\n  profile.querySelector(\".profile__title\").textContent = userInfoResponse.name;\r\n  profile.querySelector(\r\n      \".profile__description\").textContent = userInfoResponse.about;\r\n  userId = userInfoResponse._id;\r\n}\r\n\r\nfunction addNewCard(evt) {\r\n  //ф-я создания новой карточки\r\n  evt.preventDefault();\r\n  buttonSubmitPopupTypeNewCard.textContent = SAVING;\r\n  const formElement = document.forms.new_place;\r\n  const nameInput = formElement.elements[\"place-name\"].value;\r\n  const linkInput = formElement.elements.link.value;\r\n\r\n  api.addNewCard({name: nameInput, link: linkInput})\r\n  .then((result) => {\r\n    const newCard = createCard(result, openModalForDeleteCard, likedCard,\r\n        openModalForImage,\r\n        popupTypeImage, userId);\r\n    cardContainer.prepend(newCard); //ставим новую карточку на первое место в списке карточек\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  })\r\n  .finally(() => {\r\n    closeModal(popupTypeNewCard);\r\n    formElement.reset();\r\n    buttonSubmitPopupTypeNewCard.textContent = SAVE;\r\n  });\r\n}\r\n\r\nfunction openModalEditProfile(element) {\r\n  //ф-я открытия модалки редактирования профиля\r\n  clearValidation(validConfig, profileEditForm);\r\n  const name = document.querySelector(\".profile__title\").textContent;\r\n  const description = document.querySelector(\r\n      \".profile__description\"\r\n  ).textContent;\r\n  element.querySelector(\".popup__input_type_name\").value = name;\r\n  element.querySelector(\".popup__input_type_description\").value = description;\r\n  openModal(element);\r\n}\r\n\r\nlet cardToDelete = null;\r\n\r\nfunction openModalForDeleteCard(card) {\r\n  openModal(popupDeleteCard);\r\n  cardToDelete = card;\r\n}\r\nbuttonConfirmationDeleteCard.addEventListener('click',\r\n    () => confirmationDeleteCard(cardToDelete, popupDeleteCard));\r\n\r\nfunction confirmationDeleteCard(card, deleteModal) {\r\n  api.deleteCard(card.id)\r\n  .then(() => {\r\n    deleteCard(card);\r\n    closeModal(deleteModal);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n}\r\n\r\nfunction openModalForImage(element, evt) {\r\n  //ф-я открытия модальногот окна с изображаением\r\n  const popupImage = element.querySelector(\".popup__image\");\r\n  const alt = evt.target.alt;\r\n  popupImage.src = evt.target.src;\r\n  popupImage.alt = alt;\r\n  openModal(element);\r\n  element.querySelector(\".popup__caption\").textContent = alt;\r\n}\r\n\r\nfunction fillCardsData(cardList) {\r\n  cardList.forEach((card) => {\r\n    const newCard = createCard(\r\n        card,\r\n        openModalForDeleteCard,\r\n        likedCard,\r\n        openModalForImage,\r\n        popupTypeImage,\r\n        userId\r\n    );\r\n    cardContainer.append(newCard); //перебор массива и создание новой карточки\r\n  });\r\n}\r\n\r\nfunction updateAvatar(evt) {\r\n  evt.preventDefault();\r\n  buttonSubmitEditUserAvatar.textContent = SAVING;\r\n  const editAvatar = document.forms.edit_avatar;\r\n  api.updateAvatar(editAvatar.link.value)\r\n  .then((result) => {\r\n    fillUserData(result);\r\n    closeModal(modalEditUserAvatar);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  })\r\n  .finally(() => (buttonSubmitEditUserAvatar.textContent = SAVE));\r\n\r\n}\r\n\r\nenableValidation(validConfig);\r\n\r\nfunction likedCard(cardData, buttonLikeIcon, cardLikeCount) {\r\n\r\n  const likeMethod = checkLikeOwner(cardData.likes, userId) ? api.deleteLikeCard\r\n      :\r\n      api.addLikeCard;\r\n\r\n  likeMethod(cardData._id)\r\n  .then((res) => {\r\n    updateLikedCard(res, cardData, cardLikeCount);\r\n    toggleLikeCard(buttonLikeIcon);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n}\r\n\r\nfunction updateLikedCard(data, card, count) {\r\n  card.likes = data.likes;\r\n  count.textContent = card.likes.length;\r\n}\r\n\r\nprofileEditButton.addEventListener(\"click\", () => {\r\n  //слушатель открытия эдит\r\n  openModalEditProfile(popupProfileEdit);\r\n});\r\n\r\nprofileAddButton.addEventListener(\"click\", () => {\r\n  //слушатель открытия новой карточки\r\n  clearValidation(validConfig, newPlaceForm);\r\n  openModal(popupTypeNewCard);\r\n});\r\n\r\ncloseButtonPopupProfileEdit.addEventListener(\"click\", () => {\r\n  //вещаем слушателя на эдит х\r\n  closeModal(popupProfileEdit);\r\n});\r\n\r\npopupProfileEdit.addEventListener(\"click\", closeForOverlayTypeEdit); //вещаем слушателя на эдит оверлей\r\n\r\ncloseButtonPopupTypeNewCard.addEventListener(\"click\", () => {\r\n  closeModal(popupTypeNewCard); //слушатель закрывает модалку новой карточки\r\n});\r\n\r\npopupTypeNewCard.addEventListener(\"click\", closeForOverlayTypeEdit); //слушатель закрытия по оверлею\r\n\r\npopupProfileEdit.addEventListener(\"submit\", updateProfileFromFormEdit); //слушатель для эдита\r\n\r\npopupTypeNewCard.addEventListener(\"submit\", addNewCard); //слушатель для новой карточки\r\n\r\npopupProfileEdit.classList.add(\"popup_is-animated\"); //плавное закрытие и открытие попапа эдит\r\npopupTypeNewCard.classList.add(\"popup_is-animated\"); //плавное закрытие и открытие попапа  новой карточки\r\n\r\npopupTypeImage.classList.add(\"popup_is-animated\");\r\nbuttonCloseImageModal.addEventListener(\"click\", () => {\r\n  closeModal(popupTypeImage);\r\n});\r\n\r\npopupTypeImage.addEventListener(\"click\", closeForOverlayTypeEdit); //слушатель для оверлея\r\n\r\nbuttonClosePopupDeleteCard.addEventListener(\"click\", () => {\r\n  closeModal(popupDeleteCard);\r\n});\r\n\r\npopupDeleteCard.addEventListener(\"click\", closeForOverlayTypeEdit);\r\n\r\nprofileAvatar.addEventListener('click', () => {\r\n  clearValidation(validConfig, editAvatarForm);\r\n  openModal(modalEditUserAvatar);\r\n});\r\n\r\nbuttonCloseModalEditUserAvatar.addEventListener(\"click\", () => {\r\n  closeModal(modalEditUserAvatar);\r\n});\r\n\r\nmodalEditUserAvatar.addEventListener(\"click\", closeForOverlayTypeEdit);\r\n\r\nmodalEditUserAvatar.addEventListener(\"submit\", updateAvatar);\r\n\r\n\r\n\r\n\r\n"],"names":["cardTemplate","document","querySelector","content","createCard","card","deleteCard","likeCard","openModalImage","popupTypeImage","userId","cardElement","cloneNode","cardImage","cardLikeCount","likes","length","cardElementLikeCount","buttonDelete","cardLikeButton","buttonLikeIcon","id","_id","src","link","alt","name","textContent","addEventListener","evt","owner","classList","add","newCard","target","closest","checkLikeOwner","toggleLikeCard","buttonLike","toggle","res","forEach","like","openModal","element","body","style","overflow","keyDownLisnerEscForCloseModal","closeModal","remove","removeEventListener","key","closeForOverlayTypeEdit","contains","token","baseUrl","addLikeCard","cardId","fetch","method","headers","authorization","then","handleResponse","deleteLikeCard","response","ok","json","Promise","reject","status","hideInputError","formElement","formInput","validationConfig","errorElement","concat","inputErrorClass","clearValidation","form","errorlist","Array","from","querySelectorAll","errorSelector","inputSelector","input","submitButtonSelector","reset","error","errorClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","validConfig","formSelector","SAVING","SAVE","cardContainer","profileEditButton","popupProfileEdit","closeButtonPopupProfileEdit","profileEditForm","forms","edit_profile","buttonSubmitPopupProfileEdit","profileAddButton","popupTypeNewCard","closeButtonPopupTypeNewCard","newPlaceForm","new_place","buttonSubmitPopupTypeNewCard","buttonCloseImageModal","popupDeleteCard","buttonClosePopupDeleteCard","buttonConfirmationDeleteCard","profile","userAvatar","profileAvatar","modalEditUserAvatar","buttonCloseModalEditUserAvatar","buttonSubmitEditUserAvatar","editAvatarForm","edit_avatar","fillUserData","userInfoResponse","avatar","about","all","_ref","_ref2","cardsResponse","openModalForDeleteCard","likedCard","openModalForImage","append","catch","err","console","log","cardToDelete","popupImage","cardData","api","data","count","deleteModal","popupForm","preventDefault","valueMissing","setCustomValidity","dataset","errorEmpty","patternMismatch","errorPattern","typeMismatch","errorType","validationMessage","showInputError","checkInputValidity","setEventListeners","description","value","openModalEditProfile","userInfo","elements","JSON","stringify","result","finally","cardsInfo","prepend"],"sourceRoot":""}